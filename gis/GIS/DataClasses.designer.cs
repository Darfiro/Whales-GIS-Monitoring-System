#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GIS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GIS")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertwhales(whales instance);
    partial void Updatewhales(whales instance);
    partial void Deletewhales(whales instance);
    partial void Insertwhales_chip(whales_chip instance);
    partial void Updatewhales_chip(whales_chip instance);
    partial void Deletewhales_chip(whales_chip instance);
    partial void Insertwhales_meeting(whales_meeting instance);
    partial void Updatewhales_meeting(whales_meeting instance);
    partial void Deletewhales_meeting(whales_meeting instance);
    partial void Insertwhales_specie(whales_specie instance);
    partial void Updatewhales_specie(whales_specie instance);
    partial void Deletewhales_specie(whales_specie instance);
    partial void Insertspecies(species instance);
    partial void Updatespecies(species instance);
    partial void Deletespecies(species instance);
    partial void Insertscientists(scientists instance);
    partial void Updatescientists(scientists instance);
    partial void Deletescientists(scientists instance);
    partial void Insertmeetings(meetings instance);
    partial void Updatemeetings(meetings instance);
    partial void Deletemeetings(meetings instance);
    partial void Insertchip_location(chip_location instance);
    partial void Updatechip_location(chip_location instance);
    partial void Deletechip_location(chip_location instance);
    partial void Insertchip(chip instance);
    partial void Updatechip(chip instance);
    partial void Deletechip(chip instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::GIS.Properties.Settings.Default.GISConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<whales> whales
		{
			get
			{
				return this.GetTable<whales>();
			}
		}
		
		public System.Data.Linq.Table<whales_chip> whales_chip
		{
			get
			{
				return this.GetTable<whales_chip>();
			}
		}
		
		public System.Data.Linq.Table<whales_meeting> whales_meeting
		{
			get
			{
				return this.GetTable<whales_meeting>();
			}
		}
		
		public System.Data.Linq.Table<whales_specie> whales_specie
		{
			get
			{
				return this.GetTable<whales_specie>();
			}
		}
		
		public System.Data.Linq.Table<species> species
		{
			get
			{
				return this.GetTable<species>();
			}
		}
		
		public System.Data.Linq.Table<scientists> scientists
		{
			get
			{
				return this.GetTable<scientists>();
			}
		}
		
		public System.Data.Linq.Table<meetings> meetings
		{
			get
			{
				return this.GetTable<meetings>();
			}
		}
		
		public System.Data.Linq.Table<chip_location> chip_location
		{
			get
			{
				return this.GetTable<chip_location>();
			}
		}
		
		public System.Data.Linq.Table<chip> chip
		{
			get
			{
				return this.GetTable<chip>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.whales")]
	public partial class whales : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _gender;
		
		private System.Nullable<int> _age;
		
		private System.Nullable<double> _weight;
		
		private EntitySet<whales_chip> _whales_chip;
		
		private EntitySet<whales_meeting> _whales_meeting;
		
		private EntitySet<whales_specie> _whales_specie;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnageChanging(System.Nullable<int> value);
    partial void OnageChanged();
    partial void OnweightChanging(System.Nullable<double> value);
    partial void OnweightChanged();
    #endregion
		
		public whales()
		{
			this._whales_chip = new EntitySet<whales_chip>(new Action<whales_chip>(this.attach_whales_chip), new Action<whales_chip>(this.detach_whales_chip));
			this._whales_meeting = new EntitySet<whales_meeting>(new Action<whales_meeting>(this.attach_whales_meeting), new Action<whales_meeting>(this.detach_whales_meeting));
			this._whales_specie = new EntitySet<whales_specie>(new Action<whales_specie>(this.attach_whales_specie), new Action<whales_specie>(this.detach_whales_specie));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NChar(10)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int")]
		public System.Nullable<int> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float")]
		public System.Nullable<double> weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="whales_whales_chip", Storage="_whales_chip", ThisKey="id", OtherKey="whale_id")]
		public EntitySet<whales_chip> whales_chip
		{
			get
			{
				return this._whales_chip;
			}
			set
			{
				this._whales_chip.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="whales_whales_meeting", Storage="_whales_meeting", ThisKey="id", OtherKey="whale_id")]
		public EntitySet<whales_meeting> whales_meeting
		{
			get
			{
				return this._whales_meeting;
			}
			set
			{
				this._whales_meeting.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="whales_whales_specie", Storage="_whales_specie", ThisKey="id", OtherKey="whale_id")]
		public EntitySet<whales_specie> whales_specie
		{
			get
			{
				return this._whales_specie;
			}
			set
			{
				this._whales_specie.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_whales_chip(whales_chip entity)
		{
			this.SendPropertyChanging();
			entity.whales = this;
		}
		
		private void detach_whales_chip(whales_chip entity)
		{
			this.SendPropertyChanging();
			entity.whales = null;
		}
		
		private void attach_whales_meeting(whales_meeting entity)
		{
			this.SendPropertyChanging();
			entity.whales = this;
		}
		
		private void detach_whales_meeting(whales_meeting entity)
		{
			this.SendPropertyChanging();
			entity.whales = null;
		}
		
		private void attach_whales_specie(whales_specie entity)
		{
			this.SendPropertyChanging();
			entity.whales = this;
		}
		
		private void detach_whales_specie(whales_specie entity)
		{
			this.SendPropertyChanging();
			entity.whales = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.whales_chip")]
	public partial class whales_chip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _whale_id;
		
		private System.Nullable<int> _chip_id;
		
		private EntityRef<whales> _whales;
		
		private EntityRef<chip> _chip;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onwhale_idChanging(System.Nullable<int> value);
    partial void Onwhale_idChanged();
    partial void Onchip_idChanging(System.Nullable<int> value);
    partial void Onchip_idChanged();
    #endregion
		
		public whales_chip()
		{
			this._whales = default(EntityRef<whales>);
			this._chip = default(EntityRef<chip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_whale_id", DbType="Int")]
		public System.Nullable<int> whale_id
		{
			get
			{
				return this._whale_id;
			}
			set
			{
				if ((this._whale_id != value))
				{
					if (this._whales.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwhale_idChanging(value);
					this.SendPropertyChanging();
					this._whale_id = value;
					this.SendPropertyChanged("whale_id");
					this.Onwhale_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chip_id", DbType="Int")]
		public System.Nullable<int> chip_id
		{
			get
			{
				return this._chip_id;
			}
			set
			{
				if ((this._chip_id != value))
				{
					if (this._chip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onchip_idChanging(value);
					this.SendPropertyChanging();
					this._chip_id = value;
					this.SendPropertyChanged("chip_id");
					this.Onchip_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="whales_whales_chip", Storage="_whales", ThisKey="whale_id", OtherKey="id", IsForeignKey=true)]
		public whales whales
		{
			get
			{
				return this._whales.Entity;
			}
			set
			{
				whales previousValue = this._whales.Entity;
				if (((previousValue != value) 
							|| (this._whales.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._whales.Entity = null;
						previousValue.whales_chip.Remove(this);
					}
					this._whales.Entity = value;
					if ((value != null))
					{
						value.whales_chip.Add(this);
						this._whale_id = value.id;
					}
					else
					{
						this._whale_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("whales");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="chip_whales_chip", Storage="_chip", ThisKey="chip_id", OtherKey="id", IsForeignKey=true)]
		public chip chip
		{
			get
			{
				return this._chip.Entity;
			}
			set
			{
				chip previousValue = this._chip.Entity;
				if (((previousValue != value) 
							|| (this._chip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._chip.Entity = null;
						previousValue.whales_chip.Remove(this);
					}
					this._chip.Entity = value;
					if ((value != null))
					{
						value.whales_chip.Add(this);
						this._chip_id = value.id;
					}
					else
					{
						this._chip_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("chip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.whales_meeting")]
	public partial class whales_meeting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _whale_id;
		
		private System.Nullable<int> _meeting_id;
		
		private EntityRef<whales> _whales;
		
		private EntityRef<meetings> _meetings;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onwhale_idChanging(System.Nullable<int> value);
    partial void Onwhale_idChanged();
    partial void Onmeeting_idChanging(System.Nullable<int> value);
    partial void Onmeeting_idChanged();
    #endregion
		
		public whales_meeting()
		{
			this._whales = default(EntityRef<whales>);
			this._meetings = default(EntityRef<meetings>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_whale_id", DbType="Int")]
		public System.Nullable<int> whale_id
		{
			get
			{
				return this._whale_id;
			}
			set
			{
				if ((this._whale_id != value))
				{
					if (this._whales.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwhale_idChanging(value);
					this.SendPropertyChanging();
					this._whale_id = value;
					this.SendPropertyChanged("whale_id");
					this.Onwhale_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meeting_id", DbType="Int")]
		public System.Nullable<int> meeting_id
		{
			get
			{
				return this._meeting_id;
			}
			set
			{
				if ((this._meeting_id != value))
				{
					if (this._meetings.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmeeting_idChanging(value);
					this.SendPropertyChanging();
					this._meeting_id = value;
					this.SendPropertyChanged("meeting_id");
					this.Onmeeting_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="whales_whales_meeting", Storage="_whales", ThisKey="whale_id", OtherKey="id", IsForeignKey=true)]
		public whales whales
		{
			get
			{
				return this._whales.Entity;
			}
			set
			{
				whales previousValue = this._whales.Entity;
				if (((previousValue != value) 
							|| (this._whales.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._whales.Entity = null;
						previousValue.whales_meeting.Remove(this);
					}
					this._whales.Entity = value;
					if ((value != null))
					{
						value.whales_meeting.Add(this);
						this._whale_id = value.id;
					}
					else
					{
						this._whale_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("whales");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="meetings_whales_meeting", Storage="_meetings", ThisKey="meeting_id", OtherKey="id", IsForeignKey=true)]
		public meetings meetings
		{
			get
			{
				return this._meetings.Entity;
			}
			set
			{
				meetings previousValue = this._meetings.Entity;
				if (((previousValue != value) 
							|| (this._meetings.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._meetings.Entity = null;
						previousValue.whales_meeting.Remove(this);
					}
					this._meetings.Entity = value;
					if ((value != null))
					{
						value.whales_meeting.Add(this);
						this._meeting_id = value.id;
					}
					else
					{
						this._meeting_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("meetings");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.whales_specie")]
	public partial class whales_specie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _whale_id;
		
		private System.Nullable<int> _specie_id;
		
		private EntityRef<whales> _whales;
		
		private EntityRef<species> _species;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onwhale_idChanging(System.Nullable<int> value);
    partial void Onwhale_idChanged();
    partial void Onspecie_idChanging(System.Nullable<int> value);
    partial void Onspecie_idChanged();
    #endregion
		
		public whales_specie()
		{
			this._whales = default(EntityRef<whales>);
			this._species = default(EntityRef<species>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_whale_id", DbType="Int")]
		public System.Nullable<int> whale_id
		{
			get
			{
				return this._whale_id;
			}
			set
			{
				if ((this._whale_id != value))
				{
					if (this._whales.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwhale_idChanging(value);
					this.SendPropertyChanging();
					this._whale_id = value;
					this.SendPropertyChanged("whale_id");
					this.Onwhale_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_specie_id", DbType="Int")]
		public System.Nullable<int> specie_id
		{
			get
			{
				return this._specie_id;
			}
			set
			{
				if ((this._specie_id != value))
				{
					if (this._species.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onspecie_idChanging(value);
					this.SendPropertyChanging();
					this._specie_id = value;
					this.SendPropertyChanged("specie_id");
					this.Onspecie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="whales_whales_specie", Storage="_whales", ThisKey="whale_id", OtherKey="id", IsForeignKey=true)]
		public whales whales
		{
			get
			{
				return this._whales.Entity;
			}
			set
			{
				whales previousValue = this._whales.Entity;
				if (((previousValue != value) 
							|| (this._whales.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._whales.Entity = null;
						previousValue.whales_specie.Remove(this);
					}
					this._whales.Entity = value;
					if ((value != null))
					{
						value.whales_specie.Add(this);
						this._whale_id = value.id;
					}
					else
					{
						this._whale_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("whales");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="species_whales_specie", Storage="_species", ThisKey="specie_id", OtherKey="id", IsForeignKey=true)]
		public species species
		{
			get
			{
				return this._species.Entity;
			}
			set
			{
				species previousValue = this._species.Entity;
				if (((previousValue != value) 
							|| (this._species.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._species.Entity = null;
						previousValue.whales_specie.Remove(this);
					}
					this._species.Entity = value;
					if ((value != null))
					{
						value.whales_specie.Add(this);
						this._specie_id = value.id;
					}
					else
					{
						this._specie_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("species");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.species")]
	public partial class species : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _latin_name;
		
		private string _specie_name;
		
		private string _areal;
		
		private System.Nullable<int> _population;
		
		private string _status;
		
		private string _dangers;
		
		private string _color;
		
		private EntitySet<whales_specie> _whales_specie;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onlatin_nameChanging(string value);
    partial void Onlatin_nameChanged();
    partial void Onspecie_nameChanging(string value);
    partial void Onspecie_nameChanged();
    partial void OnarealChanging(string value);
    partial void OnarealChanged();
    partial void OnpopulationChanging(System.Nullable<int> value);
    partial void OnpopulationChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OndangersChanging(string value);
    partial void OndangersChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    #endregion
		
		public species()
		{
			this._whales_specie = new EntitySet<whales_specie>(new Action<whales_specie>(this.attach_whales_specie), new Action<whales_specie>(this.detach_whales_specie));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latin_name", DbType="NChar(50)")]
		public string latin_name
		{
			get
			{
				return this._latin_name;
			}
			set
			{
				if ((this._latin_name != value))
				{
					this.Onlatin_nameChanging(value);
					this.SendPropertyChanging();
					this._latin_name = value;
					this.SendPropertyChanged("latin_name");
					this.Onlatin_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_specie_name", DbType="NChar(50)")]
		public string specie_name
		{
			get
			{
				return this._specie_name;
			}
			set
			{
				if ((this._specie_name != value))
				{
					this.Onspecie_nameChanging(value);
					this.SendPropertyChanging();
					this._specie_name = value;
					this.SendPropertyChanged("specie_name");
					this.Onspecie_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_areal", DbType="NChar(100)")]
		public string areal
		{
			get
			{
				return this._areal;
			}
			set
			{
				if ((this._areal != value))
				{
					this.OnarealChanging(value);
					this.SendPropertyChanging();
					this._areal = value;
					this.SendPropertyChanged("areal");
					this.OnarealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_population", DbType="Int")]
		public System.Nullable<int> population
		{
			get
			{
				return this._population;
			}
			set
			{
				if ((this._population != value))
				{
					this.OnpopulationChanging(value);
					this.SendPropertyChanging();
					this._population = value;
					this.SendPropertyChanged("population");
					this.OnpopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dangers", DbType="NChar(1000)")]
		public string dangers
		{
			get
			{
				return this._dangers;
			}
			set
			{
				if ((this._dangers != value))
				{
					this.OndangersChanging(value);
					this.SendPropertyChanging();
					this._dangers = value;
					this.SendPropertyChanged("dangers");
					this.OndangersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="NChar(10)")]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="species_whales_specie", Storage="_whales_specie", ThisKey="id", OtherKey="specie_id")]
		public EntitySet<whales_specie> whales_specie
		{
			get
			{
				return this._whales_specie;
			}
			set
			{
				this._whales_specie.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_whales_specie(whales_specie entity)
		{
			this.SendPropertyChanging();
			entity.species = this;
		}
		
		private void detach_whales_specie(whales_specie entity)
		{
			this.SendPropertyChanging();
			entity.species = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.scientists")]
	public partial class scientists : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _fullname;
		
		private string _login;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _register_date;
		
		private string _country;
		
		private EntitySet<meetings> _meetings;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfullnameChanging(string value);
    partial void OnfullnameChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onregister_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onregister_dateChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    #endregion
		
		public scientists()
		{
			this._meetings = new EntitySet<meetings>(new Action<meetings>(this.attach_meetings), new Action<meetings>(this.detach_meetings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullname", DbType="NChar(100)")]
		public string fullname
		{
			get
			{
				return this._fullname;
			}
			set
			{
				if ((this._fullname != value))
				{
					this.OnfullnameChanging(value);
					this.SendPropertyChanging();
					this._fullname = value;
					this.SendPropertyChanged("fullname");
					this.OnfullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="NChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_register_date", DbType="Date")]
		public System.Nullable<System.DateTime> register_date
		{
			get
			{
				return this._register_date;
			}
			set
			{
				if ((this._register_date != value))
				{
					this.Onregister_dateChanging(value);
					this.SendPropertyChanging();
					this._register_date = value;
					this.SendPropertyChanged("register_date");
					this.Onregister_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="NChar(50)")]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="scientists_meetings", Storage="_meetings", ThisKey="id", OtherKey="scientist_id")]
		public EntitySet<meetings> meetings
		{
			get
			{
				return this._meetings;
			}
			set
			{
				this._meetings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_meetings(meetings entity)
		{
			this.SendPropertyChanging();
			entity.scientists = this;
		}
		
		private void detach_meetings(meetings entity)
		{
			this.SendPropertyChanging();
			entity.scientists = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.meetings")]
	public partial class meetings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<float> _latitude;
		
		private System.Nullable<float> _longitude;
		
		private string _pond_name;
		
		private System.Nullable<System.DateTime> _date_spotted;
		
		private System.Nullable<int> _scientist_id;
		
		private EntitySet<whales_meeting> _whales_meeting;
		
		private EntityRef<scientists> _scientists;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlatitudeChanging(System.Nullable<float> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<float> value);
    partial void OnlongitudeChanged();
    partial void Onpond_nameChanging(string value);
    partial void Onpond_nameChanged();
    partial void Ondate_spottedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_spottedChanged();
    partial void Onscientist_idChanging(System.Nullable<int> value);
    partial void Onscientist_idChanged();
    #endregion
		
		public meetings()
		{
			this._whales_meeting = new EntitySet<whales_meeting>(new Action<whales_meeting>(this.attach_whales_meeting), new Action<whales_meeting>(this.detach_whales_meeting));
			this._scientists = default(EntityRef<scientists>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Real")]
		public System.Nullable<float> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Real")]
		public System.Nullable<float> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pond_name", DbType="NChar(50)")]
		public string pond_name
		{
			get
			{
				return this._pond_name;
			}
			set
			{
				if ((this._pond_name != value))
				{
					this.Onpond_nameChanging(value);
					this.SendPropertyChanging();
					this._pond_name = value;
					this.SendPropertyChanged("pond_name");
					this.Onpond_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_spotted", DbType="Date")]
		public System.Nullable<System.DateTime> date_spotted
		{
			get
			{
				return this._date_spotted;
			}
			set
			{
				if ((this._date_spotted != value))
				{
					this.Ondate_spottedChanging(value);
					this.SendPropertyChanging();
					this._date_spotted = value;
					this.SendPropertyChanged("date_spotted");
					this.Ondate_spottedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scientist_id", DbType="Int")]
		public System.Nullable<int> scientist_id
		{
			get
			{
				return this._scientist_id;
			}
			set
			{
				if ((this._scientist_id != value))
				{
					if (this._scientists.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onscientist_idChanging(value);
					this.SendPropertyChanging();
					this._scientist_id = value;
					this.SendPropertyChanged("scientist_id");
					this.Onscientist_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="meetings_whales_meeting", Storage="_whales_meeting", ThisKey="id", OtherKey="meeting_id")]
		public EntitySet<whales_meeting> whales_meeting
		{
			get
			{
				return this._whales_meeting;
			}
			set
			{
				this._whales_meeting.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="scientists_meetings", Storage="_scientists", ThisKey="scientist_id", OtherKey="id", IsForeignKey=true)]
		public scientists scientists
		{
			get
			{
				return this._scientists.Entity;
			}
			set
			{
				scientists previousValue = this._scientists.Entity;
				if (((previousValue != value) 
							|| (this._scientists.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._scientists.Entity = null;
						previousValue.meetings.Remove(this);
					}
					this._scientists.Entity = value;
					if ((value != null))
					{
						value.meetings.Add(this);
						this._scientist_id = value.id;
					}
					else
					{
						this._scientist_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("scientists");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_whales_meeting(whales_meeting entity)
		{
			this.SendPropertyChanging();
			entity.meetings = this;
		}
		
		private void detach_whales_meeting(whales_meeting entity)
		{
			this.SendPropertyChanging();
			entity.meetings = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.chip_location")]
	public partial class chip_location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<double> _latitude;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<System.DateTime> _date_located;
		
		private System.Nullable<int> _chip_id;
		
		private EntityRef<chip> _chip;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void Ondate_locatedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_locatedChanged();
    partial void Onchip_idChanging(System.Nullable<int> value);
    partial void Onchip_idChanged();
    #endregion
		
		public chip_location()
		{
			this._chip = default(EntityRef<chip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_located", DbType="Date")]
		public System.Nullable<System.DateTime> date_located
		{
			get
			{
				return this._date_located;
			}
			set
			{
				if ((this._date_located != value))
				{
					this.Ondate_locatedChanging(value);
					this.SendPropertyChanging();
					this._date_located = value;
					this.SendPropertyChanged("date_located");
					this.Ondate_locatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chip_id", DbType="Int")]
		public System.Nullable<int> chip_id
		{
			get
			{
				return this._chip_id;
			}
			set
			{
				if ((this._chip_id != value))
				{
					if (this._chip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onchip_idChanging(value);
					this.SendPropertyChanging();
					this._chip_id = value;
					this.SendPropertyChanged("chip_id");
					this.Onchip_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="chip_chip_location", Storage="_chip", ThisKey="chip_id", OtherKey="id", IsForeignKey=true)]
		public chip chip
		{
			get
			{
				return this._chip.Entity;
			}
			set
			{
				chip previousValue = this._chip.Entity;
				if (((previousValue != value) 
							|| (this._chip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._chip.Entity = null;
						previousValue.chip_location.Remove(this);
					}
					this._chip.Entity = value;
					if ((value != null))
					{
						value.chip_location.Add(this);
						this._chip_id = value.id;
					}
					else
					{
						this._chip_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("chip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.chip")]
	public partial class chip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _date_start;
		
		private System.Nullable<System.DateTime> _date_finish;
		
		private EntitySet<whales_chip> _whales_chip;
		
		private EntitySet<chip_location> _chip_location;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondate_startChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_startChanged();
    partial void Ondate_finishChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_finishChanged();
    #endregion
		
		public chip()
		{
			this._whales_chip = new EntitySet<whales_chip>(new Action<whales_chip>(this.attach_whales_chip), new Action<whales_chip>(this.detach_whales_chip));
			this._chip_location = new EntitySet<chip_location>(new Action<chip_location>(this.attach_chip_location), new Action<chip_location>(this.detach_chip_location));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_start", DbType="Date")]
		public System.Nullable<System.DateTime> date_start
		{
			get
			{
				return this._date_start;
			}
			set
			{
				if ((this._date_start != value))
				{
					this.Ondate_startChanging(value);
					this.SendPropertyChanging();
					this._date_start = value;
					this.SendPropertyChanged("date_start");
					this.Ondate_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_finish", DbType="Date")]
		public System.Nullable<System.DateTime> date_finish
		{
			get
			{
				return this._date_finish;
			}
			set
			{
				if ((this._date_finish != value))
				{
					this.Ondate_finishChanging(value);
					this.SendPropertyChanging();
					this._date_finish = value;
					this.SendPropertyChanged("date_finish");
					this.Ondate_finishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="chip_whales_chip", Storage="_whales_chip", ThisKey="id", OtherKey="chip_id")]
		public EntitySet<whales_chip> whales_chip
		{
			get
			{
				return this._whales_chip;
			}
			set
			{
				this._whales_chip.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="chip_chip_location", Storage="_chip_location", ThisKey="id", OtherKey="chip_id")]
		public EntitySet<chip_location> chip_location
		{
			get
			{
				return this._chip_location;
			}
			set
			{
				this._chip_location.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_whales_chip(whales_chip entity)
		{
			this.SendPropertyChanging();
			entity.chip = this;
		}
		
		private void detach_whales_chip(whales_chip entity)
		{
			this.SendPropertyChanging();
			entity.chip = null;
		}
		
		private void attach_chip_location(chip_location entity)
		{
			this.SendPropertyChanging();
			entity.chip = this;
		}
		
		private void detach_chip_location(chip_location entity)
		{
			this.SendPropertyChanging();
			entity.chip = null;
		}
	}
}
#pragma warning restore 1591
